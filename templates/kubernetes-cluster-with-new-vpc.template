# Copyright 2017 by the contributors
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.

---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Create a Kubernetes-orchestrated CockroachDB cluster in a new VPC.
  The Kubernetes master node is an auto-recovering Amazon EC2 instance. 1-15
  additional EC2 instances in an Auto Scaling group join the Kubernetes cluster as nodes.
  An ELB provides external access to the cluster. The VPC includes a bastion host
  to grant SSH access to the Kubernetes cluster''s private subnet. This stack is not suitable
  for production use due to its minimal security and durability guarantees.
  **WARNING** This template creates several Amazon EC2 instances ( [Cluster Size] nodes + 1 K8s master node + 1 t2.micro bastion host).
  AWS will bill you for the resources this template uses.'

# The Metadata tells AWS how to display the parameters during stack creation
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Security
      Parameters:
      - KeyName
      - AdminIngressLocation
    - Label:
        default: CockroachDB Cluster Settings
      Parameters:
      - Version
      - K8sNodeCapacity
      - InitialCockroachClusterSize
      - InstanceType
      - DiskSizeGb
    - Label:
        default: Load Generators
      Parameters:
      - Workload
      - WorkloadConcurrency

    - Label:
        default: Advanced
      Parameters:
      - QSS3BucketName
      - QSS3KeyPrefix

    ParameterLabels:
      Version:
        default: CockroachDB Version
      KeyName:
        default: SSH Key
      AdminIngressLocation:
        default: IP Address Whitelist
      InstanceType:
        default: Instance Type
      DiskSizeGb:
        default: Node Disk Size (GiB)
      K8sNodeCapacity:
        default: Kubernetes Cluster Size
      Workload:
        default: Workload
      WorkloadConcurrency:
        default: Concurrent Connections Per Node
      QSS3BucketName:
        default: AWS Quick Start S3 Bucket
      QSS3KeyPrefix:
        default: AWS Quick Start S3 Key Prefix
      InitialCockroachClusterSize:
        default: CockroachDB Cluster Size

# The Parameters allow the user to pass custom settings to the stack before creation
Parameters:
  Version:
    Description: Choose between the latest stable or pre-release CockroachDB binary.
    Type: String
    Default: Stable
    AllowedValues:
    - Stable
    - Pre-release

  KeyName:
    Description: Existing EC2 KeyPair for SSH access.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: EC2 instance type for the cluster.
    Type: String
    Default: t2.medium
    AllowedValues:
    - t2.medium
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  # Specifies the size of the root disk for all EC2 instances, including master
  # and nodes.
  DiskSizeGb:
    Description: 'Provisioned IOPS SSD volume size for each CockroachDB node.'
    Default: 20
    Type: Number
    MinValue: 4
    MaxValue: 4096

  AdminIngressLocation:
    Description: IP address range (CIDR notation) to allow access to the CockroachDB Web UI, PostgreSQL ports,
      and Kubernetes master node (via the bastion host).
      Use 0.0.0.0/0 to allow access from all locations.
    Type: String
    Default: '0.0.0.0/0'
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  K8sNodeCapacity:
    Default: '1'
    Description: Size of the Kubernetes cluster.
    Type: Number
    AllowedValues:
    - 1
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15

  Workload:
    Default: 'None'
    Description: Options for generating traffic for the cluster.
    Type: String
    AllowedValues:
    - None
    - Evenly Distributed (KV)
    - Internet-style (YCSB)
    - OLTP (TPC-C 100)

  WorkloadConcurrency:
    Description: 'The number of concurrent connections the workload generator will create per node.'
    Default: 10
    Type: Number
    MinValue: 1
    MaxValue: 1000


  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).

    Default: cockroachdb-cloudformation
    Description: This and the S3 Key Prefix parameter let you access
      scripts from the scripts/ and templates/ directories in your own fork of the CockroachDB
      Quick Start assets.
    Type: String

  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-]+(/[0-9a-zA-Z-]+)*$"
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/). It cannot start or end
      with forward slash (/) because they are automatically appended.
    Default: kubernetes
    Description: This and the S3 Bucket parameter let you access scripts from
      the scripts/ and templates/ directories in your own fork of the CockroachDB
      Quick Start assets.
    Type: String

  InitialCockroachClusterSize:
    Default: '1'
    Description: Initial number of CockroachDB instances.
    Type: Number
    AllowedValues:
    - 1
    - 3
    - 4
    - 5
    - 6
    - 7
    - 8
    - 9
    - 10
    - 11
    - 12
    - 13
    - 14
    - 15


Mappings:
  RegionMap:
    ap-northeast-1:
      '64': ami-18afc47f
    ap-northeast-2:
      '64': ami-93d600fd
    ap-south-1:
      '64': ami-dd3442b2
    ap-southeast-1:
      '64': ami-87b917e4
    ap-southeast-2:
      '64': ami-e6b58e85
    ca-central-1:
      '64': ami-7112a015
    eu-central-1:
      '64': ami-fe408091
    eu-west-1:
      '64': ami-ca80a0b9
    eu-west-2:
      '64': ami-ede2e889
    sa-east-1:
      '64': ami-e075ed8c
    us-east-1:
      '64': ami-9dcfdb8a
    us-east-2:
      '64': ami-fcc19b99
    us-west-1:
      '64': ami-b05203d0
    us-west-2:
      '64': ami-b2d463d2

Conditions:
  UsEast1Condition:
    Fn::Equals:
    - !Ref AWS::Region
    - "us-east-1"

Resources:
  # Resources for new VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName:
        # us-east-1 needs .ec2.internal, the rest of the regions get <region>.compute.internal.
        # See http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_DHCP_Options.html
        Fn::If:
        - UsEast1Condition
        - "ec2.internal"
        - !Sub "${AWS::Region}.compute.internal"
      DomainNameServers:
      - AmazonProvidedDNS

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Network
        Value: Public

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.0.0/19'
      Tags:
      - Key: Name
        Value: Private subnet
      - Key: Network
        Value: Private

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.128.0/20'
      AvailabilityZone: !GetAtt PrivateSubnet.AvailabilityZone
      Tags:
      - Key: Name
        Value: Public subnet
      - Key: Network
        Value: Public
      - Key: KubernetesCluster
        Value: !Ref AWS::StackName
      MapPublicIpOnLaunch: true

  # The NAT IP for the private subnet, as seen from within the public one
  NATEIP:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # The NAT gateway for the private subnet
  NATGateway:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private subnets
      - Key: Network
        Value: Private

  PrivateSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateSubnetRouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicSubnetRouteTable

  # Taken from github.com/aws-quickstart/quickstart-linux-bastion.  We don't
  # call it directly because that quickstart forces 2 bastion hosts and we only
  # want one
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
        - RegionMap
        - Ref: AWS::Region
        - '64'
      InstanceType: t2.micro
      NetworkInterfaces:
      - AssociatePublicIpAddress: true
        DeleteOnTermination: true
        DeviceIndex: 0
        SubnetId: !Ref PublicSubnet
        # This address is chosen because our public subnet begins at 10.0.128.0/20
        PrivateIpAddress: '10.0.128.5'
        GroupSet:
        - Ref: BastionSecurityGroup
      Tags:
      - Key: Name
        Value: bastion-host
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64:
          Fn::Sub: |
            #!/bin/bash

            BASTION_BOOTSTRAP_FILE=bastion_bootstrap.sh
            BASTION_BOOTSTRAP=https://s3.amazonaws.com/quickstart-reference/linux/bastion/latest/scripts/bastion_bootstrap.sh

            curl -s -o $BASTION_BOOTSTRAP_FILE $BASTION_BOOTSTRAP
            chmod +x $BASTION_BOOTSTRAP_FILE

            ./$BASTION_BOOTSTRAP_FILE --banner https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/scripts/banner_message.txt --enable true

  # Open up port 22 for SSH for the bastion host
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: !Ref AdminIngressLocation
  
  # Call the cluster template and supply its parameters
  # This creates a second stack that creates the actual Kubernetes cluster
  # within the new VPC
  K8sStack:
    DependsOn:
      - BastionHost
      - BastionSecurityGroup
      - DHCPOptions
      - InternetGateway
      - NATEIP
      - NATGateway
      - PrivateSubnet
      - PrivateSubnetRoute
      - PrivateSubnetRouteTable
      - PrivateSubnetRouteTableAssociation
      - PublicSubnet
      - PublicSubnetRoute
      - PublicSubnetRouteTable
      - PublicSubnetRouteTableAssociation
      - VPCDHCPOptionsAssociation
      - VPCGatewayAttachment
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/kubernetes-cluster.template"
      Parameters:
        VPCID: !Ref VPC
        AvailabilityZone: !GetAtt PrivateSubnet.AvailabilityZone
        Version: !Ref Version
        InstanceType: !Ref InstanceType
        DiskSizeGb: !Ref DiskSizeGb
        ClusterSubnetId: !Ref PrivateSubnet
        # Direct SSH access only from the bastion host itself
        SSHLocation: !Sub "${BastionHost.PrivateIp}/32"
        ApiLbLocation: !Ref AdminIngressLocation
        KeyName: !Ref KeyName
        K8sNodeCapacity: !Ref K8sNodeCapacity
        Workload: !Ref Workload
        WorkloadConcurrency: !Ref WorkloadConcurrency
        InitialCockroachClusterSize: !Ref InitialCockroachClusterSize
        QSS3BucketName: !Ref QSS3BucketName
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        ClusterAssociation: !Ref AWS::StackName
        LoadBalancerSubnetId: !Ref PublicSubnet

Outputs:
  # Outputs from VPC creation
  WebUI:
    Description: Web UI for the cluster.
    Value: !GetAtt K8sStack.Outputs.WebUI
  ConnectionString:
    Description: Connection string to the cluster.
    Value: !GetAtt K8sStack.Outputs.ConnectionString
  SSHProxyCommand:
    Description: Command to ssh into the master K8s node.
    Value: !Sub >-
      SSH_KEY="path/to/${KeyName}.pem";
      ssh
      -i $SSH_KEY
      -A -L8080:localhost:8080
      -o ProxyCommand="ssh -i \"${!SSH_KEY}\" ubuntu@${BastionHost.PublicIp} nc %h %p"
      ubuntu@${K8sStack.Outputs.MasterPrivateIp}
